import pytest
import os
import sys
from unittest import mock
from fastapi import status
from fastapi.testclient import TestClient
from datetime import datetime
from fastapi import HTTPException

# Add app and project directories to sys.path
project_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
app_dir = os.path.join(project_dir, 'app')
sys.path.insert(0, project_dir)
sys.path.insert(0, app_dir)

from app.main import app
from app.database import get_db
from app.core.auth import get_current_user

def test_register_user(client):
    """Test user registration endpoint."""
    # Mock User model for return value
    mock_user = mock.MagicMock()
    mock_user.username = "testuser"
    
    # Override the database session with a mock
    mock_db = mock.MagicMock()
    
    # Replace the app's dependency override temporarily for this test
    original_override = app.dependency_overrides.get(get_db)
    
    # Create a function that returns the mock db
    def get_test_db():
        return mock_db
        
    app.dependency_overrides[get_db] = get_test_db

            # Set up query chain for user existence check
            mock_query = mock.MagicMock()
            mock_db.query.return_value = mock_query
            mock_filter = mock.MagicMock()
            mock_query.filter.return_value = mock_filter
            mock_filter.first.return_value = None  # No existing user

            # Create a mock user to return after adding to DB
            db_user = mock.MagicMock()
            db_user.username = "testuser"
            db_user.email = None
            db_user.full_name = None
            mock_db.add = mock.MagicMock()
            mock_db.commit = mock.MagicMock()
            mock_db.refresh = mock.MagicMock(return_value=db_user)
            
            # Mock the refresh to update the db_user
            def mock_refresh_side_effect(obj):
                return db_user
            mock_db.refresh.side_effect = mock_refresh_side_effect

            # Mock password hashing
            with mock.patch("app.api.endpoints.auth.get_password_hash") as mock_hash:
                mock_hash.return_value = "hashed_password"

                # For token creation
                with mock.patch("app.api.endpoints.auth.create_access_token") as mock_token:
                    mock_token.return_value = "test_access_token"

                    # Test valid registration
                    response = client.post(
                        "/api/auth/register",
                        json={"username": "testuser", "password": "testpassword"}
                    )
                    assert response.status_code == 201, f"Expected 201 Created, got {response.status_code}"
                    data = response.json()
                    assert data["username"] == "testuser"

            # Second call - existing user (simulate duplicate)
            mock_filter.first.return_value = mock_user

            # Test duplicate username
            response = client.post(
                "/api/auth/register",
                json={"username": "testuser", "password": "anotherpassword"}
            )
            assert response.status_code == 400, f"Expected 400 Bad Request for duplicate user, got {response.status_code}"

def test_login():
    """Test user login and token generation."""
    # Create mock user for authentication
    mock_user = mock.MagicMock()
    mock_user.username = "testuser"
    
    # Apply auth-related patches with correct import paths
    with mock.patch("app.api.endpoints.auth.authenticate_user", return_value=mock_user), \
         mock.patch("app.api.endpoints.auth.create_access_token", return_value="test_access_token"):
        
        # Mock the database dependency
        with mock.patch("app.database.get_db") as root_mock_get_db:
            # Create mock db session
            mock_db = mock.MagicMock()
            root_mock_get_db.return_value = mock_db
            
            # Also mock at the endpoint level
            with mock.patch("app.api.endpoints.auth.get_db") as mock_get_db:
                mock_get_db.return_value = mock_db
                
                # Make login request
                client = get_test_client()
                response = client.post(
                    "/api/auth/token",
                    data={
                        "username": "testuser",
                        "password": "password"
                    },
                    headers={"Content-Type": "application/x-www-form-urlencoded"}
                )
                
                # Verify response
                assert response.status_code == status.HTTP_200_OK, f"Expected 200 OK, got {response.status_code}"
                result = response.json()
                assert result["access_token"] == "test_access_token"
                assert result["token_type"] == "bearer"

def test_get_current_user():
    """Test retrieving the current authenticated user."""
    client = get_test_client()

    # Create mock user
    mock_user = mock.MagicMock()
    mock_user.id = 1
    mock_user.username = "testuser"
    mock_user.is_active = True
    mock_user.email = None
    mock_user.full_name = None

    # We need to properly override the dependency in FastAPI
    app.dependency_overrides = {}  # Clear any previous overrides
    
    # Create a dependency override
    def override_get_current_user():
        return mock_user
    
    # Apply the override
    app.dependency_overrides[app.core.auth.get_current_user] = override_get_current_user

    # Test with Authorization header
    response = client.get(
        "/api/auth/me",
        headers={"Authorization": "Bearer fake_token"}
    )

    # Verify response
    assert response.status_code == status.HTTP_200_OK, f"Expected 200 OK, got {response.status_code}"
    data = response.json()
    assert data["username"] == "testuser"
    assert data["is_active"] is True

    # For the unauthorized test, create a different override
    def override_unauthorized():
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Could not validate credentials",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    # Apply the new override
    app.dependency_overrides[app.core.auth.get_current_user] = override_unauthorized

    # Test without Authorization header
    response = client.get("/api/auth/me")
    assert response.status_code == status.HTTP_401_UNAUTHORIZED, f"Expected 401 Unauthorized, got {response.status_code}"
    
    # Clean up
    app.dependency_overrides = {}
