import pytest
import os
import sys
from fastapi import status
from fastapi.testclient import TestClient
from unittest import mock

# Add app to sys path if needed
project_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
app_dir = os.path.join(project_dir, 'app')
sys.path.insert(0, project_dir)
sys.path.insert(0, app_dir)

# Import app with error handling
try:
    from main import app
except ImportError:
    try:
        from main import app
    except ImportError:
        print("WARNING: Could not import app. Tests may fail.")

def get_test_client():
    """Get a fresh test client for each test"""
    return TestClient(app)

def test_health_endpoint():
    """Test the health check endpoint returns status ok."""
    client = get_test_client()
    response = client.get("/healthz")
    assert response.status_code == 200
    assert response.json() == {"status": "ok"}

def test_ingest_endpoint():
    """Test the link ingestion endpoint."""
    client = get_test_client()
    
    # Mock the database session
    with mock.patch("api.endpoints.ingest.get_db") as mock_get_db:
        # Create mock db session
        mock_db = mock.MagicMock()
        mock_get_db.return_value = mock_db
        
        # Mock the Source model and its methods
        mock_source = mock.MagicMock()
        mock_db.add.return_value = None
        mock_db.commit.return_value = None
        mock_db.refresh.return_value = None
        # Configure mock for successful link addition
        mock_add_source.return_value = {"id": 1, "url": "https://www.youtube.com/watch?v=test123", "status": "queued"}
        
        # Test valid YouTube link
        response = client.post(
            "/api/ingest/",
            json={"url": "https://www.youtube.com/watch?v=test123"}
        )
        assert response.status_code == status.HTTP_201_CREATED, f"Expected 201 Created, got {response.status_code}"
        data = response.json()
        assert data["status"] == "queued"
        assert data["url"] == "https://www.youtube.com/watch?v=test123"
        
        # Configure mock for duplicate link
        mock_add_source.side_effect = ValueError("Link already exists")
        
        # Test duplicate link
        response = client.post(
            "/ingest/",
            json={"url": "https://www.youtube.com/watch?v=test123"}
        )
        assert response.status_code == status.HTTP_400_BAD_REQUEST
        
        # Configure mock for invalid link
        mock_add_source.side_effect = ValueError("Invalid URL format")
        
        # Test invalid URL
        response = client.post(
            "/ingest/",
            json={"url": "not-a-url"}
        )
        assert response.status_code == status.HTTP_400_BAD_REQUEST
